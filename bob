#!/usr/bin/env python

import argparse
import json
import pathlib
import shlex
import subprocess

CONFIG = {
        "default_key_alg": "EC -pkeyopt ec_paramgen_curve:prime256v1",
        "cert_path": "./pub_certs/",
        "key_path": "./keys/",
        "services": [
            {'name': 'test', 'subject_str': '/CN=test'},
        ],
}


def openssl(*args):
    cmdline = ['openssl']
    for arg in args:
        cmdline += shlex.split(arg)
    subprocess.check_call(cmdline)


def create_key(service, key_path, key_alg):
    key_file = str(key_path.joinpath('{}.key.pem'.format(service)))
    openssl('genpkey -outform PEM -algorithm', key_alg, '-out', shlex.quote(key_file))
    return key_file


def create_cert(service, cert_path, key_file, subject_str):
    cert_file = str(cert_path.joinpath('{}.cer.pem'.format(service)))
    openssl('req -new -days 365 -nodes -x509 -outform PEM -subj', shlex.quote(subject_str),
            '-out', shlex.quote(cert_file),
            '-key', shlex.quote(key_file))
    return cert_file


def mkdir(path):
    try:
        path.mkdir(mode=0o700)
    except OSError:
        pass
        # ignore the error since it is already there


def read_config(config, json_data_file):
    with json_data_file:
        loaded_conf = json.load(json_data_file)
        config.update(loaded_conf)
        return config


def parse_args():
    parser = argparse.ArgumentParser(description='Bob the certificate builder.')
    parser.add_argument('--config', default='./config/cert_conf.json',
                        type=argparse.FileType('r'),
                        help='configuration file for the creation of certificates')
    return parser.parse_args()


def main():
    args = parse_args()
    config = read_config(CONFIG, args.config)

    key_path = pathlib.Path(config['key_path'])
    cert_path = pathlib.Path(config['cert_path'])

    # Create folders
    mkdir(cert_path)
    mkdir(key_path)

    for s in config['services']:
        service = s['name']
        subject_str = s['subject_str']
        key_alg = s.get('key_alg', config['default_key_alg'])
        key_file = create_key(service, key_path, key_alg)
        create_cert(service, cert_path, key_file, subject_str)


if __name__ == '__main__':
    main()
